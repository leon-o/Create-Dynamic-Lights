plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    modImplementation ("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")
    modImplementation ("dev.lambdaurora:lambdynamiclights:${lambdynamiclights_version}")
    modCompileOnly("dev.lambdaurora:spruceui:${spruceui_version}")
    modImplementation ("com.terraformersmc:modmenu:${modmenu_version}")
    modImplementation ("net.minecraftforge:forgeconfigapiport-fabric:${forgeconfigapiport_fabric_version}")

    localRuntime ("org.joml:joml:1.10.4")
    localRuntime ('org.anarres:jcpp:1.4.14')
    localRuntime ('io.github.douira:glsl-transformer:2.0.0-pre14')
    modLocalRuntime ("maven.modrinth:sodium:${sodium_version}")
    modLocalRuntime ("maven.modrinth:iris:${iris_version}")
    modLocalRuntime ("maven.modrinth:iris-flw-compat:fabric${minecraft_version}+${iris_flw_compat_version}")
}

processResources {
    inputs.property 'version', mod_version

    filesMatching('fabric.mod.json') {
        expand version: mod_version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
